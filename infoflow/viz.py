"""This module creates the workflow visualisation based on the instances and using the `graphiz` module."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_create_vizualisation.ipynb.

# %% auto 0
__all__ = ['get_info_items_for_tool', 'build_graphiz_from_intances', 'create_workflow_viz']

# %% ../nbs/02_create_vizualisation.ipynb 3
import graphviz
from fastcore.test import *
import operator # also gets imported with fasthtml.common
from .classdb import *
from .creinst import *

# %% ../nbs/02_create_vizualisation.ipynb 12
def get_info_items_for_tool(tool_name: str, info_items: dict[InformationItem]) -> dict[InformationItem]:
    """Filters all the instances of the class InformationItem based on which information items can be processed by the given tool."""
    if isinstance(info_items, dict): info_items = info_items.values()
    phases = ['collect', 'retrieve', 'consume', 'extract', 'refine']
    tool_name = tool_name.lower()
    
    res = {}
    for i in info_items:
        tf = getattr(i, 'toolflow', None)
        if tf is None: continue
        for ph in phases:
            ts = getattr(tf, ph, None)
            if ts is None: continue
            if isinstance(ts, (list, tuple)):
                if tool_name in ts: res[i.name] = i; break
            elif ts == tool_name:
                res[i.name] = i; break
    
    return res

# %% ../nbs/02_create_vizualisation.ipynb 17
# New function based on updated dataclasses
def build_graphiz_from_intances(info_items, tools) -> graphviz.graphs.Digraph:
    """Create a graphviz visualisation using the updated dataclasses for InformationItem and Tool.
    Produces the same layout as build_graphiz_from_instances.
    """
    if isinstance(info_items, dict): info_items = list(info_items.values())
    elif not isinstance(info_items, list): info_items = [info_items]
    if isinstance(tools, dict): tools = list(tools.values())

    dot = graphviz.Digraph(comment='PKM Workflow')
    dot.attr(rankdir='TB')

    phases = ['collect', 'retrieve', 'consume', 'extract', 'refine']
    all_nodes = set()
    edges = {}

    quality_colors = {PhaseQuality.GREAT: 'lightgreen', PhaseQuality.OK: 'lightblue', PhaseQuality.BAD: 'orange', PhaseQuality.NA: 'lightgray'}

    # Create tool nodes per phase
    for phase in phases:
        with dot.subgraph() as s:
            s.attr(rank='same')
            for info_item in info_items:
                tool_entry = getattr(getattr(info_item, 'toolflow', None), phase, None)
                if tool_entry is None: continue
                tools_in_phase = tool_entry if isinstance(tool_entry, (tuple)) else (tool_entry,)
                for tool_slug in tools_in_phase:
                    if tool_slug is None: continue
                    node_id = f"{tool_slug}_{phase}"
                    if node_id in all_nodes: continue
                    tool = next((t for t in tools if getattr(t, 'slug', None) == tool_slug), None)
                    q = getattr(getattr(tool, 'phase_quality', None), phase, PhaseQuality.NA) if tool else PhaseQuality.NA
                    color = quality_colors.get(q, 'white')
                    s.node(node_id, f"{tool_slug}\n({phase})", shape='hexagon', fillcolor=color, style='filled')
                    all_nodes.add(node_id)

    # Create source nodes for each InformationItem type (label with item.name, id by info_type)
    with dot.subgraph() as s:
        s.attr(rank='same')
        for info_item in info_items:
            it = getattr(info_item, 'info_type', None)
            val = it.value if hasattr(it, 'value') else str(it)
            source_id = f"source_{val}"
            s.node(source_id, getattr(info_item, 'name', (val or '').replace('_', ' ').title()), shape='box')

    # Connect edges along the flow
    for info_item in info_items:
        it = getattr(info_item, 'info_type', None)
        val = it.value if hasattr(it, 'value') else str(it)
        source_id = f"source_{val}"
        prev_nodes = [source_id]
        for phase in phases:
            tool_entry = getattr(getattr(info_item, 'toolflow', None), phase, None)
            if tool_entry is None: continue
            curr_nodes = []
            tools_in_phase = tool_entry if isinstance(tool_entry, (list, tuple)) else (tool_entry,)
            for tool_name in tools_in_phase:
                if tool_name is None: continue
                node_id = f"{str(tool_name).lower()}_{phase}"
                curr_nodes.append(node_id)
                for prev in prev_nodes:
                    key = (prev, node_id)
                    if key in edges: continue
                    dot.edge(prev, node_id)
                    edges[key] = True
            if curr_nodes: prev_nodes = curr_nodes

    return dot

# %% ../nbs/02_create_vizualisation.ipynb 18
def create_workflow_viz(items: InformationItem | dict[str, InformationItem],
                        tools: Tool | dict[str, Tool],
                        tool_filter: None | str = None) -> graphviz.graphs.Digraph:
    """Create workflow visualization with flexible filtering options."""
    # Filter by tool if specified
    if tool_filter:
        items = get_info_items_for_tool(tool_filter, items)
    
    return build_graphiz_from_intances(items, tools)

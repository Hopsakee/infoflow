"""This module creates the workflow visualisation based on the instances and using the `graphiz` module."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_create_vizualisation.ipynb.

# %% auto 0
__all__ = ['create_combined_workflow_viz']

# %% ../nbs/02_create_vizualisation.ipynb 3
import graphviz
from .clasdef import *
from .creinst import *

# %% ../nbs/02_create_vizualisation.ipynb 5
def create_combined_workflow_viz(info_items, all_tools):
    if not isinstance(info_items, list): info_items = [info_items]
    
    dot = graphviz.Digraph(comment='PKM Workflow')
    dot.attr(rankdir='TB')
    
    phases = ['collect', 'retrieve', 'consume', 'extract', 'refine']
    all_nodes = set()
    edges = {}
    
    quality_colors = {PhaseQuality.GREAT: 'lightgreen', PhaseQuality.OK: 'lightblue', PhaseQuality.BAD: 'orange', PhaseQuality.NA: 'lightgray'}
    
    for phase in phases:
        with dot.subgraph() as s:
            s.attr(rank='same')
            for info_item in info_items:
                i = phases.index(phase)
                if i < len(info_item.toolflow) and info_item.toolflow[i] is not None:
                    tool_entry = info_item.toolflow[i]
                    if isinstance(tool_entry, tuple): tools_in_phase = tool_entry
                    else: tools_in_phase = (tool_entry,)
                    
                    for tool_name in tools_in_phase:
                        if tool_name is not None:
                            node_id = f"{tool_name.lower()}_{phase}"
                            if node_id not in all_nodes:
                                tool = next((t for t in all_tools if t.name == tool_name), None)
                                color = quality_colors[tool.phase_quality[i]] if tool else 'white'
                                s.node(node_id, f"{tool_name}\n({phase})", shape='hexagon', fillcolor=color, style='filled')
                                all_nodes.add(node_id)
    
    with dot.subgraph() as s:
        s.attr(rank='same')
        for info_item in info_items:
            source_id = f"source_{info_item.info_type.value}"
            s.node(source_id, info_item.info_type.value.replace('_', ' ').title(), shape='box')
    
    for info_item in info_items:
        source_id = f"source_{info_item.info_type.value}"
        previous_nodes = [source_id]
        
        for i, tool_entry in enumerate(info_item.toolflow):
            if i < len(phases) and tool_entry is not None:
                phase = phases[i]
                current_nodes = []
                
                if isinstance(tool_entry, tuple): tools_in_phase = tool_entry
                else: tools_in_phase = (tool_entry,)
                
                for tool_name in tools_in_phase:
                    if tool_name is not None:
                        node_id = f"{tool_name.lower()}_{phase}"
                        current_nodes.append(node_id)
                        
                        for prev_node in previous_nodes:
                            edge_key = (prev_node, node_id)
                            if edge_key not in edges:
                                dot.edge(prev_node, node_id)
                                edges[edge_key] = True
                
                if current_nodes: previous_nodes = current_nodes
    
    return dot

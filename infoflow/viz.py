"""This module creates the workflow visualisation based on the instances and using the `graphiz` module."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_create_vizualisation.ipynb.

# %% auto 0
__all__ = ['get_info_items_for_tool', 'build_graphiz_from_instances', 'build_graphiz_from_intances_new', 'create_workflow_viz',
           'create_workflow_viz_new']

# %% ../nbs/02_create_vizualisation.ipynb 3
import graphviz
from fastcore.test import *
import operator # also gets imported with fasthtml.common
from .classdb import *
from .creinst import *

# %% ../nbs/02_create_vizualisation.ipynb 11
def get_info_items_for_tool(tool_name: str, info_items: dict[InformationItem]) -> dict[InformationItem]:
    """Filters all the instances of the class InformationItem based on which information items can be processed by the given tool."""
    if isinstance(info_items, dict): info_items = info_items.values()
    print(f"info_items: {info_items}")
    phases = ['collect', 'retrieve', 'consume', 'extract', 'refine']
    tool_name = tool_name.lower()
    
    res = {}
    for i in info_items:
        print(f"info_item: {i}")
        tf = getattr(i, 'toolflow', None)
        print(f"toolflow: {tf}")
        if tf is None: continue
        for ph in phases:
            print(f"phase: {ph}")
            ts = getattr(tf, ph, None)
            print(f"tools: {ts}")
            if ts is None: continue
            if isinstance(ts, (list, tuple)):
                print(f"ts is list: {ts}")
                if tool_name in ts: res[i.name] = i; break
            elif ts == tool_name:
                res[i.name] = i; break
    
    return res

# %% ../nbs/02_create_vizualisation.ipynb 16
def build_graphiz_from_instances(info_items: dict[InformationItem], tools: dict[Tool]) -> graphviz.graphs.Digraph:
    """Create a graphviz visualisation based on the instances of the InformationItem class and their flow through the instances of the Tool class."""
    if isinstance(info_items, dict): info_items = list(info_items.values())
    elif not isinstance(info_items, list): info_items = [info_items]
    if isinstance(tools, dict): tools = list(tools.values())
    
    dot = graphviz.Digraph(comment='PKM Workflow')
    dot.attr(rankdir='TB')
    
    phases = ['collect', 'retrieve', 'consume', 'extract', 'refine']
    all_nodes = set()
    edges = {}
    
    quality_colors = {PhaseQuality.GREAT: 'lightgreen', PhaseQuality.OK: 'lightblue', PhaseQuality.BAD: 'orange', PhaseQuality.NA: 'lightgray'}
    
    for phase in phases:
        with dot.subgraph() as s:
            s.attr(rank='same')
            for info_item in info_items:
                i = phases.index(phase)
                if i < len(info_item.toolflow) and info_item.toolflow[i] is not None:
                    tool_entry = info_item.toolflow[i]
                    if isinstance(tool_entry, (list, tuple)): tools_in_phase = tool_entry
                    else: tools_in_phase = (tool_entry,)
                    
                    for tool_name in tools_in_phase:
                        if tool_name is not None:
                            node_id = f"{tool_name.lower()}_{phase}"
                            if node_id not in all_nodes:
                                tool = next((t for t in tools if t.name == tool_name), None)
                                color = quality_colors[tool.phase_quality[i]] if tool else 'white'
                                s.node(node_id, f"{tool_name}\n({phase})", shape='hexagon', fillcolor=color, style='filled')
                                all_nodes.add(node_id)
    
    with dot.subgraph() as s:
        s.attr(rank='same')
        for info_item in info_items:
            source_id = f"source_{info_item.info_type.value}"
            s.node(source_id, info_item.name, shape='box')
    
    for info_item in info_items:
        source_id = f"source_{info_item.info_type.value}"
        previous_nodes = [source_id]
        
        for i, tool_entry in enumerate(info_item.toolflow):
            if i < len(phases) and tool_entry is not None:
                phase = phases[i]
                current_nodes = []
                
                if isinstance(tool_entry, (list, tuple)): tools_in_phase = tool_entry
                else: tools_in_phase = (tool_entry,)
                
                for tool_name in tools_in_phase:
                    if tool_name is not None:
                        node_id = f"{tool_name.lower()}_{phase}"
                        current_nodes.append(node_id)
                        
                        for prev_node in previous_nodes:
                            edge_key = (prev_node, node_id)
                            if edge_key not in edges:
                                dot.edge(prev_node, node_id)
                                edges[edge_key] = True
                
                if current_nodes: previous_nodes = current_nodes
    
    return dot

# %% ../nbs/02_create_vizualisation.ipynb 17
# New function based on updated dataclasses
def build_graphiz_from_intances_new(info_items, tools) -> graphviz.graphs.Digraph:
    """Create a graphviz visualisation using the updated dataclasses for InformationItem and Tool.
    Produces the same layout as build_graphiz_from_instances.
    """
    if isinstance(info_items, dict): info_items = list(info_items.values())
    elif not isinstance(info_items, list): info_items = [info_items]
    if isinstance(tools, dict): tools = list(tools.values())

    dot = graphviz.Digraph(comment='PKM Workflow')
    dot.attr(rankdir='TB')

    phases = ['collect', 'retrieve', 'consume', 'extract', 'refine']
    all_nodes = set()
    edges = {}

    quality_colors = {PhaseQuality.GREAT: 'lightgreen', PhaseQuality.OK: 'lightblue', PhaseQuality.BAD: 'orange', PhaseQuality.NA: 'lightgray'}

    # Create tool nodes per phase
    for phase in phases:
        with dot.subgraph() as s:
            s.attr(rank='same')
            for info_item in info_items:
                tool_entry = getattr(getattr(info_item, 'toolflow', None), phase, None)
                if tool_entry is None: continue
                tools_in_phase = tool_entry if isinstance(tool_entry, (list, tuple)) else (tool_entry,)
                for tool_name in tools_in_phase:
                    if tool_name is None: continue
                    node_id = f"{str(tool_name).lower()}_{phase}"
                    if node_id in all_nodes: continue
                    tool = next((t for t in tools if getattr(t, 'name', None) == tool_name), None)
                    q = getattr(getattr(tool, 'phase_quality', None), phase, PhaseQuality.NA) if tool else PhaseQuality.NA
                    color = quality_colors.get(q, 'white')
                    s.node(node_id, f"{tool_name}\n({phase})", shape='hexagon', fillcolor=color, style='filled')
                    all_nodes.add(node_id)

    # Create source nodes for each InformationItem type (label with item.name, id by info_type)
    with dot.subgraph() as s:
        s.attr(rank='same')
        for info_item in info_items:
            it = getattr(info_item, 'info_type', None)
            val = it.value if hasattr(it, 'value') else str(it)
            source_id = f"source_{val}"
            s.node(source_id, getattr(info_item, 'name', (val or '').replace('_', ' ').title()), shape='box')

    # Connect edges along the flow
    for info_item in info_items:
        it = getattr(info_item, 'info_type', None)
        val = it.value if hasattr(it, 'value') else str(it)
        source_id = f"source_{val}"
        prev_nodes = [source_id]
        for phase in phases:
            tool_entry = getattr(getattr(info_item, 'toolflow', None), phase, None)
            if tool_entry is None: continue
            curr_nodes = []
            tools_in_phase = tool_entry if isinstance(tool_entry, (list, tuple)) else (tool_entry,)
            for tool_name in tools_in_phase:
                if tool_name is None: continue
                node_id = f"{str(tool_name).lower()}_{phase}"
                curr_nodes.append(node_id)
                for prev in prev_nodes:
                    key = (prev, node_id)
                    if key in edges: continue
                    dot.edge(prev, node_id)
                    edges[key] = True
            if curr_nodes: prev_nodes = curr_nodes

    return dot

# %% ../nbs/02_create_vizualisation.ipynb 18
def create_workflow_viz(items: None | InformationItem | dict[str, InformationItem] = None,
                        tools: None | Tool | dict[str, Tool] =None,
                        tool_filter: None | str = None) -> graphviz.graphs.Digraph:
    """Create workflow visualization with flexible filtering options."""
    # Default to all items and tools if none specified
    if items is None: items = InformationItem.get_instances()
    if tools is None: tools = Tool.get_instances()
    
    # Filter by tool if specified
    if tool_filter:
        items = get_info_items_for_tool(tool_filter, items)
    
    return build_graphiz_from_instances(items, tools)

# %% ../nbs/02_create_vizualisation.ipynb 19
def create_workflow_viz_new(items: None | InformationItem | dict[str, InformationItem] = None,
                        tools: None | Tool | dict[str, Tool] =None,
                        tool_filter: None | str = None) -> graphviz.graphs.Digraph:
    """Create workflow visualization with flexible filtering options."""
    # Default to all items and tools if none specified
    if items is None: items = InformationItem.get_instances()
    if tools is None: tools = Tool.get_instances()
    
    # Filter by tool if specified
    if tool_filter:
        items = get_info_items_for_tool(tool_filter, items)
    
    return build_graphiz_from_intances_new(items, tools)

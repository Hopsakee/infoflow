"""This module defines the classes we use to represent the PKM workflow."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_classes_db.ipynb.

# %% ../nbs/00_classes_db.ipynb 3
from __future__ import annotations

# %% auto 0
__all__ = ['InformationType', 'Method', 'Phase', 'PhaseQuality', 'OrganizationSystem', 'InformationItem', 'Tool', 'Improvement',
           'ImprovementDB', 'InformationItemDB', 'ToolDB', 'create_db']

# %% ../nbs/00_classes_db.ipynb 4
import json
from enum import Enum
from typing import List, Union, ClassVar
from dataclasses import dataclass
from pydantic import BaseModel, field_serializer, field_validator
from fastlite import *
from fastcore.test import *

# %% ../nbs/00_classes_db.ipynb 8
class InformationType(Enum):
    """Information content types that flow through the PKM workflow."""
    BOOK = "book"
    RESEARCH_PAPER = "research_paper"
    DOCUMENT = "document"
    ANNOTATION = "annotations&highlights"
    NOTE = "note"
    EMAIL = "email"
    DISCORD_MESSAGE = "discord_message"
    WEB_ARTICLE = "web_article"
    YOUTUBE_VIDEO = "youtube_video"
    PODCAST = "podcast"
    PRODUCT_IDEA = "product_idea"
    PROJECT_IDEA = "project_idea"

class Method(Enum):
    """How actions are performed - manually or automatically."""
    MANUAL = "manual"
    AUTOMATIC = "automatic"

class Phase(Enum):
    """The five phases of the PKM workflow."""
    COLLECT = "collect"
    RETRIEVE = "retrieve"
    CONSUME = "consume"
    EXTRACT = "extract"
    REFINE = "refine"

class PhaseQuality(Enum):
    """Quality rating for how well a tool performs in each phase."""
    NA = "na"
    BAD = "bad"
    OK = "ok"
    GREAT = "great"

class OrganizationSystem(Enum):
    """How tools organize and structure information."""
    TAGS = "tags"
    FOLDERS = "folders"
    LINKS = "links"
    JOHNNY_DECIMAL = "johnny_decimal"

# %% ../nbs/00_classes_db.ipynb 15
class InformationItem(BaseModel):
    """Represents an information item flowing through the PKM workflow."""
    name: str
    info_type: InformationType
    method: list[Union[Method, None]]  # [collect, retrieve, consume, extract, refine]
    toolflow: list  # [collect, retrieve, consume, extract, refine]

    _instances: ClassVar[list[InformationItem]] = []

    def __init__(self, **data):
        super().__init__(**data)
        type(self)._instances.append(self)
    
    @classmethod
    def get_instances(cls) -> List[InformationItem]:
        return cls._instances.copy()
    
    @field_serializer('info_type','method', 'toolflow')
    def db_serialize(self, v):
        if isinstance(v, list):
            return json.dumps([i.value if hasattr(i, 'value') else i for i in v])
        return str(v.value) if hasattr(v, 'value') else v
    
    @field_validator('method', 'toolflow', mode='before')
    def parse_json_lists(cls, value):
        if isinstance(value, str):
            return json.loads(value)
        return value

class Tool(BaseModel):
    """Represents a PKM tool with supported information items."""
    name: str
    info_items: list[InformationItem]
    organization_system: list[OrganizationSystem]
    phase_quality: list[PhaseQuality]

    _instances: ClassVar[List[Tool]] = []

    def __init__(self, **data):
        super().__init__(**data)
        type(self)._instances.append(self)
    
    @classmethod
    def get_instances(cls) -> list[Tool]:
        return cls._instances.copy()
    
    @field_serializer('info_items', 'organization_system', 'phase_quality')
    def db_serialize(self, v):
        if isinstance(v, list):
            return json.dumps([i.value if hasattr(i, 'value') else i for i in v])
        return str(v.value) if hasattr(v, 'value') else v
    
    @field_validator('info_items', 'organization_system', 'phase_quality', mode='before')
    def parse_json_lists(cls, value):
        if isinstance(value, str):
            return json.loads(value)
        return value

class Improvement(BaseModel):
    """Tracks workflow improvements needed for better PKM effectiveness."""
    title: str
    what: str
    why: str
    prio: int
    tool: Tool
    phase: Phase

    _instances: ClassVar[List[Improvement]] = []

    def __init__(self, **data):
        super().__init__(**data)
        type(self)._instances.append(self)
    
    @classmethod
    def get_instances(cls) -> list[Improvement]:
        return cls._instances.copy()
    
    @field_serializer('tool', 'phase')
    def db_serialize(self, v):
        if isinstance(v, list):
            return json.dumps([i.value if hasattr(i, 'value') else i for i in v])
        return str(v.value) if hasattr(v, 'value') else v
    
    @field_validator('tool', 'phase', mode='before')
    def parse_json_lists(cls, value):
        if isinstance(value, str):
            return json.loads(value)
        return value

# %% ../nbs/00_classes_db.ipynb 21
@dataclass
class ImprovementDB:
    id: int
    title: str
    what: str
    why: str
    prio: int
    workflow_routes: str

@dataclass
class InformationItemDB:
    id: int
    name: str
    info_type: str
    method: str
    toolflow: str

@dataclass
class ToolDB:
    id: int
    name: str
    info_items: str
    organization_system: str
    phase_quality: str

# %% ../nbs/00_classes_db.ipynb 24
def create_db(loc="static/infoflow.db"):
    db = database(loc)
    db.execute("PRAGMA foreign_keys = ON;")
    inf_tbl = db.create(InformationItemDB)
    tool_tbl = db.create(ToolDB)
    impr_tbl = db.create(ImprovementDB)
    return inf_tbl, tool_tbl, impr_tbl

